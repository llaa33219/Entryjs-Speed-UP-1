<!DOCTYPE html>
<html lang="ko">
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0" />
    <title>Entry.js OnlyRun Mode</title>
    <% for (var css in htmlWebpackPlugin.files.css) { %>
    <link href="<%= htmlWebpackPlugin.files.css[css] %>" rel="stylesheet" />
    <% } %>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #000;
            overflow: hidden;
            font-family: Arial, sans-serif;
        }
        
        #onlyrun-container {
            width: 100vw;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background: #f0f0f0;
        }
        
        #stage-container {
            position: relative;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        
        #loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: white;
            z-index: 9999;
        }
        
        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 4px solid rgba(255,255,255,0.3);
            border-top: 4px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .loading-text {
            font-size: 18px;
            margin-bottom: 10px;
        }
        
        .loading-subtext {
            font-size: 14px;
            opacity: 0.8;
        }
        
        .error-screen {
            background: #ff4757;
            color: white;
            padding: 40px;
            border-radius: 8px;
            text-align: center;
            max-width: 500px;
            margin: 20px;
        }
        
        .error-title {
            font-size: 24px;
            margin-bottom: 15px;
        }
        
        .error-message {
            font-size: 16px;
            line-height: 1.5;
        }
        
        .controls {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            display: flex;
            gap: 10px;
        }
        
        .control-btn {
            background: rgba(0,0,0,0.7);
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.3s;
        }
        
        .control-btn:hover {
            background: rgba(0,0,0,0.9);
        }
        
        .control-btn.active {
            background: #4CAF50;
        }
    </style>
</head>

<body>
    <div id="loading-screen">
        <div class="loading-spinner"></div>
        <div class="loading-text">üöÄ Entry.js OnlyRun Î™®Îìú</div>
        <div class="loading-subtext">ÌîÑÎ°úÏ†ùÌä∏Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</div>
    </div>
    
    <div id="onlyrun-container" style="display: none;">
        <div id="stage-container">
            <!-- Entry.js StageÍ∞Ä Ïó¨Í∏∞Ïóê Î†åÎçîÎßÅÎê©ÎãàÎã§ -->
        </div>
    </div>
    
    <div class="controls" style="display: none;" id="controls">
        <button class="control-btn" id="play-btn" onclick="togglePlay()">‚ñ∂Ô∏è Ïã§Ìñâ</button>
        <button class="control-btn" id="stop-btn" onclick="stopProject()">‚èπÔ∏è Ï†ïÏßÄ</button>
        <button class="control-btn" id="fullscreen-btn" onclick="toggleFullscreen()">üî≥ Ï†ÑÏ≤¥ÌôîÎ©¥</button>
    </div>

    <!--language-->
    <script src="../extern/lang/ko.js"></script>

    <!-- Entry.js ÏùòÏ°¥ÏÑ± ÎùºÏù¥Î∏åÎü¨Î¶¨Îì§ -->
    <script src="https://playentry.org/lib/PreloadJS/lib/preloadjs-0.6.0.min.js"></script>
    <script src="https://playentry.org/lib/EaselJS/lib/easeljs-0.8.0.min.js"></script>
    <script src="https://playentry.org/lib/SoundJS/lib/soundjs-0.6.0.min.js"></script>
    <script src="https://playentry.org/lib/SoundJS/lib/flashaudioplugin-0.6.0.min.js"></script>
    <script src="https://playentry.org/lib/lodash/dist/lodash.min.js"></script>
    <script src="https://playentry.org/lib/jquery/jquery.min.js"></script>
    <script src="https://playentry.org/lib/jquery-ui/ui/minified/jquery-ui.min.js"></script>
    <script src="https://playentry.org/lib/velocity/velocity.min.js"></script>
    <script src="../extern/util/static.js"></script>
    <script src="https://playentry.org/lib/entry-js/extern/util/filbert.js"></script>
    <script src="https://playentry.org/lib/entry-js/extern/util/CanvasInput.js"></script>
    <script src="https://playentry.org/lib/entry-js/extern/util/ndgmr.Collision.js"></script>
    <script src="https://playentry.org/lib/entry-js/extern/util/handle.js"></script>
    <script src="https://playentry.org/lib/entry-js/extern/util/bignumber.min.js"></script>

    <% for (var chunk in htmlWebpackPlugin.files.js) { %>
    <script src="<%= htmlWebpackPlugin.files.js[chunk] %>"></script>
    <% } %>

    <script>
        // OnlyRun Î™®Îìú Ï†ÑÏö© Ïä§ÌÅ¨Î¶ΩÌä∏
        class OnlyRunManager {
            constructor() {
                this.projectId = null;
                this.projectData = null;
                this.isPlaying = false;
            }
            
            // URLÏóêÏÑú ÌîÑÎ°úÏ†ùÌä∏ ID Ï∂îÏ∂ú
            extractProjectId() {
                const path = window.location.pathname;
                const match = path.match(/\/onlyrun\/([a-zA-Z0-9]+)/);
                return match ? match[1] : null;
            }
            
            // Ïù¥ÎØ∏ÏßÄ ÌååÏùºÎ™ÖÏùÑ Ï†àÎåÄ ÎßÅÌÅ¨Î°ú Î≥ÄÌôò
            convertImagePath(filename) {
                if (!filename || filename.length < 4) return filename;
                
                const prefix1 = filename.substring(0, 2);
                const prefix2 = filename.substring(2, 4);
                
                return `https://playentry.org/uploads/${prefix1}/${prefix2}/image/${filename}`;
            }
            
            // ÌîÑÎ°úÏ†ùÌä∏ Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°ú Î≥ÄÌôò
            processProjectData(projectData) {
                if (!projectData || !projectData.objects) return projectData;
                
                // Ïò§Î∏åÏ†ùÌä∏Îì§Ïùò Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°ú Î≥ÄÌôò
                projectData.objects.forEach(obj => {
                    if (obj.pictures) {
                        obj.pictures.forEach(picture => {
                            if (picture.filename) {
                                picture.fileurl = this.convertImagePath(picture.filename);
                            }
                        });
                    }
                    if (obj.sounds) {
                        obj.sounds.forEach(sound => {
                            if (sound.filename) {
                                sound.fileurl = this.convertImagePath(sound.filename);
                            }
                        });
                    }
                });
                
                return projectData;
            }
            
            // Entry.org GraphQL APIÏóêÏÑú ÌîÑÎ°úÏ†ùÌä∏ Î°úÎìú
            async loadProject(projectId) {
                try {
                    const response = await fetch("https://playentry.org/graphql/SELECT_PROJECT", {
                        method: "POST",
                        headers: {
                            "accept": "*/*",
                            "content-type": "application/json",
                            "x-client-type": "Client"
                        },
                        body: JSON.stringify({
                            query: `
                                query SELECT_PROJECT($id: ID! $groupId: ID) {
                                    project(id: $id, groupId: $groupId) {
                                        id
                                        name
                                        user {
                                            id
                                            nickname
                                            profileImage {
                                                id
                                                name
                                                filename
                                                imageType
                                            }
                                        }
                                        thumb
                                        isopen
                                        category
                                        created
                                        updated
                                        visit
                                        likeCnt
                                        comment
                                        description
                                        speed
                                        objects
                                        variables
                                        messages
                                        functions
                                        tables
                                        scenes
                                        expansionBlocks
                                        aiUtilizeBlocks
                                    }
                                }
                            `,
                            variables: { id: projectId }
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.errors) {
                        throw new Error(result.errors[0].message);
                    }
                    
                    if (!result.data || !result.data.project) {
                        throw new Error('ÌîÑÎ°úÏ†ùÌä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
                    }
                    
                    return result.data.project;
                } catch (error) {
                    console.error('ÌîÑÎ°úÏ†ùÌä∏ Î°úÎìú Ïã§Ìå®:', error);
                    throw error;
                }
            }
            
            // ÏóêÎü¨ ÌôîÎ©¥ ÌëúÏãú
            showError(message) {
                const loadingScreen = document.getElementById('loading-screen');
                loadingScreen.innerHTML = `
                    <div class="error-screen">
                        <div class="error-title">‚ùå Ïò§Î•ò Î∞úÏÉù</div>
                        <div class="error-message">${message}</div>
                        <br>
                        <button class="control-btn" onclick="location.reload()">üîÑ Îã§Ïãú ÏãúÎèÑ</button>
                    </div>
                `;
            }
            
            // Entry.js Ï¥àÍ∏∞Ìôî Î∞è ÌîÑÎ°úÏ†ùÌä∏ Î°úÎìú
            async initializeEntry() {
                try {
                    // ÌîÑÎ°úÏ†ùÌä∏ ID Ï∂îÏ∂ú
                    this.projectId = this.extractProjectId();
                    if (!this.projectId) {
                        throw new Error('ÌîÑÎ°úÏ†ùÌä∏ IDÍ∞Ä URLÏóê ÏóÜÏäµÎãàÎã§. /onlyrun/{ÌîÑÎ°úÏ†ùÌä∏ID} ÌòïÏãùÏúºÎ°ú Ï†ëÍ∑ºÌï¥Ï£ºÏÑ∏Ïöî.');
                    }
                    
                    // ÌîÑÎ°úÏ†ùÌä∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
                    this.projectData = await this.loadProject(this.projectId);
                    this.projectData = this.processProjectData(this.projectData);
                    
                    // Entry.js Ï¥àÍ∏∞Ìôî
                    const initOption = {
                        type: 'minimize', // ÏµúÏÜåÌôî Î™®Îìú (Ïã§Ìñâ ÌôîÎ©¥Îßå)
                        libDir: '',
                        entryDir: '',
                        textCodingEnable: false,
                        hardwareEnable: false,
                        objectEditable: false,
                        objectAddable: false,
                        objectDeletable: false,
                        soundEditable: false,
                        pictureEditable: false,
                        sceneEditable: false,
                        functionEnable: true,
                        messageEnable: true,
                        variableEnable: true,
                        listEnable: true,
                        expansionDisable: true,
                        aiUtilizeDisable: true
                    };
                    
                    Entry.init(document.getElementById('stage-container'), initOption);
                    
                    // ÌîÑÎ°úÏ†ùÌä∏ Î°úÎìú
                    Entry.loadProject(this.projectData);
                    
                    // Entry.js ÏãúÏûë
                    Entry.start();
                    
                    // Î°úÎî© ÌôîÎ©¥ Ïà®Í∏∞Í∏∞
                    document.getElementById('loading-screen').style.display = 'none';
                    document.getElementById('onlyrun-container').style.display = 'flex';
                    document.getElementById('controls').style.display = 'flex';
                    
                    // ÏûêÎèô Ïã§Ìñâ
                    setTimeout(() => {
                        this.startProject();
                    }, 1000);
                    
                    console.log('üöÄ OnlyRun Î™®ÎìúÎ°ú ÌîÑÎ°úÏ†ùÌä∏Í∞Ä Î°úÎìúÎêòÏóàÏäµÎãàÎã§:', this.projectData.name);
                    
                } catch (error) {
                    console.error('Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
                    this.showError(error.message);
                }
            }
            
            // ÌîÑÎ°úÏ†ùÌä∏ Ïã§Ìñâ
            startProject() {
                if (Entry.engine) {
                    Entry.engine.run();
                    this.isPlaying = true;
                    document.getElementById('play-btn').textContent = '‚è∏Ô∏è ÏùºÏãúÏ†ïÏßÄ';
                    document.getElementById('play-btn').classList.add('active');
                }
            }
            
            // ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÏßÄ
            stopProject() {
                if (Entry.engine) {
                    Entry.engine.stop();
                    this.isPlaying = false;
                    document.getElementById('play-btn').textContent = '‚ñ∂Ô∏è Ïã§Ìñâ';
                    document.getElementById('play-btn').classList.remove('active');
                }
            }
            
            // Ïã§Ìñâ/ÏùºÏãúÏ†ïÏßÄ ÌÜ†Í∏Ä
            togglePlay() {
                if (this.isPlaying) {
                    this.stopProject();
                } else {
                    this.startProject();
                }
            }
        }
        
        // Ï†ÑÏó≠ Ìï®ÏàòÎì§
        let onlyRunManager;
        
        function togglePlay() {
            if (onlyRunManager) {
                onlyRunManager.togglePlay();
            }
        }
        
        function stopProject() {
            if (onlyRunManager) {
                onlyRunManager.stopProject();
            }
        }
        
        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen();
                document.getElementById('fullscreen-btn').textContent = 'üî≤ Ï†ÑÏ≤¥ÌôîÎ©¥ Ìï¥Ï†ú';
            } else {
                document.exitFullscreen();
                document.getElementById('fullscreen-btn').textContent = 'üî≥ Ï†ÑÏ≤¥ÌôîÎ©¥';
            }
        }
        
        // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî
        window.PUBLIC_PATH_FOR_ENTRYJS = 'lib/entry-js/dist/';
        
        $(document).ready(function() {
            onlyRunManager = new OnlyRunManager();
            onlyRunManager.initializeEntry();
        });
        
        // ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§
        document.addEventListener('keydown', function(e) {
            if (e.code === 'Space') {
                e.preventDefault();
                togglePlay();
            } else if (e.code === 'Escape') {
                stopProject();
            } else if (e.code === 'F11') {
                e.preventDefault();
                toggleFullscreen();
            }
        });
    </script>
</body>
</html>
